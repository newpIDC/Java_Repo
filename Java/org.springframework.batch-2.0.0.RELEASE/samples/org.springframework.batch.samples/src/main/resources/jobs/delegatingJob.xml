<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<beans:description>
		The intent is to to give an example of how existing bean
		definitions (e.g. from custom application's domain layer) can be
		integrated into a batch job.
	</beans:description>

	<job id="delegateJob">
		<step id="step1">
			<tasklet>
				<chunk reader="reader" writer="writer" commit-interval="1"/>
			</tasklet>
		</step>
	</job>

	<beans:bean id="reader" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
		<beans:property name="targetObject" ref="delegateObject" />
		<beans:property name="targetMethod" value="getData" />
	</beans:bean>

	<beans:bean id="writer" class="org.springframework.batch.item.adapter.PropertyExtractingDelegatingItemWriter">
		<beans:property name="targetObject" ref="delegateObject" />
		<beans:property name="targetMethod" value="processPerson" />
		<beans:property name="fieldsUsedAsTargetMethodArguments">
			<beans:list>
				<beans:value>firstName</beans:value>
				<beans:value>address.city</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="delegateObject" class="org.springframework.batch.sample.domain.person.PersonService" />

</beans:beans>